pipeline {
agent any
triggers { pollSCM('*/5 * * * *') }
stages{
      
	  
	  notifyStarted()
	  
    stage('Fetch'){
		steps{
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'a65bd883-dc29-4cbd-9d92-2d7265ca5b41', url: 'https://github.com/npadula/jenkinsTest']]])
		}

    }
	
	stage('NPM Restore'){
	   steps{
	       powershell script: '.\\buildscripts\\npm_restore.ps1'
	   }
	    
	}
	
	stage('Build'){
	   steps{
	       powershell script: '.\\buildscripts\\dotnet_publish.ps1'
	   }
	    
	}
	
	stage('Run Tests'){
	   steps{
	       powershell script: '.\\buildscripts\\run_tests.ps1'
	   }
	   
	    
	}
	
	stage('Deploy Site'){
	   steps{
	       powershell script: '.\\buildscripts\\deploy_site.ps1'
	   }
	    
	}
	

	
	stage('Configure'){
	   steps{
	       powershell script: '.\\buildscripts\\configure.ps1'
	   }
	    
	}
	

	


	

}


	
	 post {
        always {
		
				    powershell(returnStdout: false, script: 'Write-Output "Executing Post-Build actions [ALWAYS]"')
					 
					 

		   
       step([
            $class : 'XUnitPublisher',
            thresholdMode: 1,
            thresholds: [
                // TODO: what is skipped?
                [$class: 'FailedThreshold', failureNewThreshold: '', failureThreshold: '', unstableNewThreshold: '', unstableThreshold: '0'],
                [$class: 'SkippedThreshold', failureNewThreshold: '', failureThreshold: '', unstableNewThreshold: '', unstableThreshold: '']
            ],
            tools : [[
                $class: 'MSTestJunitHudsonTestType',
                deleteOutputFiles: false,
                failIfNotNew: false,
                pattern: "\\TestResults\\*.trx",
                skipNoTestFiles: false,
                stopProcessingIfError: true
            ]]
        ])
		
		
		powershell script: '.\\buildscripts\\post_always.ps1'
		
		
		
    }
}
}



def notifyStarted() {
  // send to Slack
 // slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
 
  // send to HipChat
  //hipchatSend (color: 'YELLOW', notify: true,
    //  message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
    //)
 
  // send to email
  emailext (
      subject: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
      body: """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>""",
      recipientProviders: [[$class: 'DevelopersRecipientProvider']]
    )